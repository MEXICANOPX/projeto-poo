class Tarefa {
    constructor(description) {
      this.description = description;
      this.completed = false;
    }
  }
  
  class TarefaRepetitiva extends Tarefa {
    constructor(description, frequency, startDate) {
      super(description);
      this.frequency = frequency; // Pode ser "diária", "semanal", "mensal", etc.
      this.startDate = startDate; // Data de início da tarefa repetitiva
    }
  }
  
  class TarefaPrioritária extends Tarefa {
    constructor(description, priority, deadline) {
      super(description);
      this.priority = priority; // Pode ser "alta", "média", "baixa", etc.
      this.deadline = deadline; // Data limite para a tarefa prioritária
    }
  }
  
  class TarefaComEtiqueta extends Tarefa {
    constructor(description, tags) {
      super(description);
      this.tags = tags; // Uma lista de etiquetas associadas à tarefa
    }
  }
  
  // Atualiza a função de adicionar tarefa para criar a tarefa apropriada com base no tipo
  function addTask(description, type, details) {
    let task;
    switch (type) {
      case 'repetitiva':
        task = new TarefaRepetitiva(description, details.frequency, details.startDate);
        break;
      case 'prioritária':
        task = new TarefaPrioritária(description, details.priority, details.deadline);
        break;
      case 'etiqueta':
        task = new TarefaComEtiqueta(description, details.tags);
        break;
      default:
        task = new Tarefa(description);
    }
    tasks.push(task);
    console.log(`Tarefa "${description}" adicionada.`);
  }
  
  // Atualize a função processCommand para suportar os novos tipos de tarefa
  function processCommand(command) {
    const parts = command.split(' ');
    const action = parts[0].toLowerCase();
    const description = parts.slice(1).join(' ');
  
    switch (action) {
      case 'add':
        const taskDetails = parseTaskDetails(description);
        addTask(taskDetails.description, taskDetails.type, taskDetails.details);
        break;
      case 'complete':
        markTaskAsCompleted(parseInt(description) - 1);
        break;
      case 'remove':
        removeTask(parseInt(description) - 1);
        break;
      case 'list':
        displayTasks();
        break;
      case 'exit':
        rl.close();
        break;
      default:
        console.log("Comando inválido. Use 'add', 'complete', 'remove', 'list' ou 'exit'.");
    }
  }
  
  function parseTaskDetails(description) {
    const parts = description.split(' ');
    const type = parts.shift();
    const details = {};
    
    switch (type) {
      case 'repetitiva':
        details.frequency = parts[0];
        details.startDate = parts[1];
        break;
      case 'prioritária':
        details.priority = parts[0];
        details.deadline = parts[1];
        break;
      case 'etiqueta':
        details.tags = parts;
        break;
    }
    
    return { description: parts.join(' '), type, details };
  }
  
